#pragma once

// ######################################################################### //
// ### Input.h ############################################################# //
// ### Defines the Input class that will be responsible for input        ### //
// ### polling.                                                          ### //
// ######################################################################### //

#include "LazyEngine/Core/Core.h"

#include "LazyEngine/Core/Input/GamepadCodes.h"
#include "LazyEngine/Core/Input/KeyCodes.h"
#include "LazyEngine/Core/Input/MouseButtonCodes.h"

#include "LazyEngine/Core/Input/Gamepad.h"

#include <glm/glm.hpp>

namespace LazyEngine {


	/**
	 *	A Singleton Class with static functions to query the state of keys, mouse buttons and the mouse position.
	 */
	class LAZYENGINE_API Input {
	public:
		virtual ~Input() = default;

		// static wrappers of the singleton's methods

		// ################################################################# //
		// ### Keyboard Input ############################################## //
		// ################################################################# //
		/**
		 *	checks the state of a key at this moment.
		 *	@param keyCode: the key to be checked.
		 */
		inline static bool isKeyPressed(KeyCode keycode) { return s_instance->isKeyPressedImpl(keycode); }
		

		// ################################################################# //
		// ### Mouse Input ################################################# //
		// ################################################################# //
		/**
		 *	checks the state of a mouse button at this moment.
		 *	@param button: the button to be checked.
		 */
		inline static bool isMouseButtonPressed(MouseButtonCode button) { return s_instance->isMouseButtonPressedImpl(button); }
		/**
		 *	returns the current x-coordinate of the mouse.
		 *	(In Pixels relative to the top-left corner of the Window)
		 */
		inline static float getMouseX() { return s_instance->getMouseXImpl(); }
		/**
		 *	returns the current y-coordinate of the mouse
		 *	(In Pixels relative to the top-left corner of the Window)
		 */
		inline static float getMouseY() { return s_instance->getMouseYImpl(); }
		/**
		 *	returns the mouse position as a pair of [x,y].
		 *	(In Pixels relative to the top-left corner of the Window)
		 */
		inline static const glm::vec2 getMousePosition() { return s_instance->getMousePositionImpl(); }

		// ################################################################# //
		// ### Gamepad Input ############################################### //
		// ################################################################# //
		/**
		 *	returns how many gamepads are currently connected
		 */
		inline static int getConnectedGamepadCount() { return s_instance->getConnectedGamepadCountImpl(); }
		
		inline static GamepadID connectGamepad(Ref<Gamepad> gamepad) { return s_instance->connectGamepadImpl(gamepad); }
		
		inline static bool disconnectGamepad(Ref<Gamepad> gamepad) { return s_instance->disconnectGamepadImpl(gamepad); }

		/**
		 *	disconnects a gamepad.
		 */
		inline static bool disconnectGamepad(GamepadID id) { return s_instance->disconnectGamepadImpl(id); }

		/**
		 *	returns the gamepad of a given id. If no gamepad is registered at that id, nullptr is returned.
		 */
		inline static Ref<Gamepad> getGamepad(GamepadID id) { return s_instance->getGamepadImpl(id); }
		/**
		 *	returns the first registered gamepad. If no gamepad is registered, nullptr is returned.
		 */
		inline static Ref<Gamepad> getFirstGamepad() { return s_instance->getFirstGamepadImpl(); }
		/**
		 *	returns the GamepadID of a connected gamepad. If this gamepad is not connected, -1 will be returned.
		 */
		inline static GamepadID getGamepadIDOf(const Gamepad& gamepad) { return s_instance->getGamepadIDOfImpl(gamepad); }
		/**
		 *	Sets the callback that should be used for events, that are generated by a call to "pollEvents"
		 */
		inline static void setGamepadEventCallback(const EventCallbackFn& callback) { s_instance->setGamepadEventCallbackImpl(callback); }
		/**
		 *	polls all events that have not been resolved since the last poll
		 */
		inline static void pollEvents() { s_instance->pollEventsImpl(); }

	protected:
		

		/**
		 *	protected constructor to stop the user from creating a new Input object by accident
		 */
		Input() = default;

		Input(const Input& copy) = delete;
		Input(const Input&& move) = delete;

		Input& operator=(const Input& copy) = delete;
		Input& operator=(const Input&& move) = delete;

		// methods to be implemented for each platform individually.

		// ################################################################# //
		// ### Keyboard Input ############################################## //
		// ################################################################# //
		/**
		 *	checks the state of a key at this moment.
		 *	@param keyCode: the key to be checked.
		 */
		virtual bool isKeyPressedImpl(KeyCode keycode) const = 0;

		// ################################################################# //
		// ### Mouse Input ################################################# //
		// ################################################################# //
		/**
		 *	checks the state of a mouse button at this moment.
		 *	@param button: the button to be checked.
		 */
		virtual bool isMouseButtonPressedImpl(MouseButtonCode button) const = 0;
		/**
		 *	returns the current x-coordinate of the mouse.
		 */
		virtual float getMouseXImpl() const = 0;
		/**
		 *	returns the current y-coordinate of the mouse.
		 */
		virtual float getMouseYImpl() const = 0;
		/**
		 *	returns the mouse position as a pair of [x,y].
		 */
		virtual const glm::vec2 getMousePositionImpl() const = 0;


		// ################################################################# //
		// ### Gamepad Input ############################################### //
		// ################################################################# //

		virtual GamepadID connectGamepadImpl(Ref<Gamepad> gamepad) = 0;

		virtual bool disconnectGamepadImpl(Ref<Gamepad> gamepad) = 0;

		virtual bool disconnectGamepadImpl(GamepadID id) = 0;

		virtual Ref<Gamepad> getGamepadImpl(GamepadID id) const = 0;
		
		virtual Ref<Gamepad> getFirstGamepadImpl() const = 0;

		virtual GamepadID getGamepadIDOfImpl(const Gamepad& gamepad) const = 0;

		virtual int getConnectedGamepadCountImpl() const = 0;

		virtual void setGamepadEventCallbackImpl(const EventCallbackFn& callback) = 0;

		virtual void pollEventsImpl() = 0;

	private:
		// the singleton instance of input that will represent a specific platform on runtime
		static Scope<Input> s_instance;
	};



}